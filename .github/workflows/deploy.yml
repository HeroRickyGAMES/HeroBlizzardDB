# Nome do nosso fluxo de automação
name: Build and Deploy to OnRender

# Gatilho: Este fluxo vai rodar sempre que houver um push na branch 'main'
on:
  push:
    branches: [ "main" ]

# Define as variáveis de ambiente que usaremos
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # Ex: herorickygames/heroblizzarddb

# Tarefas que serão executadas
jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # Rodará em uma máquina virtual Linux no GitHub

    # Permissões necessárias para o job poder enviar a imagem para o GHCR
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Pega o código do seu repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Faz o login no GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Este segredo é fornecido automaticamente pelo GitHub

      # 3. Constrói a imagem Docker e envia para o registro
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest # Ex: ghcr.io/herorickygames/heroblizzarddb:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 4. (Opcional, mas recomendado) Envia um sinal para o OnRender para ele atualizar
      - name: Trigger OnRender Deploy
        run: curl -X POST ${{ secrets.ONRENDER_DEPLOY_HOOK_URL }}